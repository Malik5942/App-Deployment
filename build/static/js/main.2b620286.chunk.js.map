{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","display","names","selected","changeState","_this","setState","prevState","console","log","toogleMenue","react_default","a","createElement","App_Cities","this","Component","Cities","text","name","fname","changeHandler","event","_event$target","target","value","_this2","Object","defineProperty","clearAll","items","props","map","n","index","key","onClick","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAIMA,oNAEJC,MAAQ,CACNC,SAAS,EACTC,MAAO,CAAC,WAAY,SAAU,UAC9BC,SAAU,MAGZC,YAAc,WACZC,EAAKC,SAAU,SAACC,GAEd,OADAC,QAAQC,IAAIF,GACJ,CAACL,MAAO,CAAC,QAAS,UAAW,kBAMzCQ,YAAc,YACc,IAAvBL,EAAKL,MAAMC,QACZI,EAAKC,SAAS,CAACL,SAAQ,IAGvBI,EAAKC,SAAS,CAACL,SAAQ,6EAMzB,OACAU,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAD,CAAQZ,MAAOa,KAAKf,MAAME,MAAOD,QAASc,KAAKf,MAAMC,QACrDG,YAAaW,KAAKX,YAAaM,YAAaK,KAAKL,cAEjDC,EAAAC,EAAAC,cAAA,UAAKE,KAAKf,MAAMG,kBAjCNa,cAwCZC,6MAWNjB,MAAQ,CACNkB,KAAM,GACNC,KAAM,GACNC,MAAO,MAGPC,cAAgB,SAACC,GACfd,QAAQC,IAAIa,GADW,IAAAC,EAEDD,EAAME,OAArBL,EAFgBI,EAEhBJ,KAAMM,EAFUF,EAEVE,MACbC,EAAKpB,SAALqB,OAAAC,EAAA,EAAAD,CAAA,GAAgBR,EAAQM,OAG1BI,SAAW,WACTH,EAAKpB,SAAS,CACZY,KAAK,GACLC,KAAM,GACNC,MAAO,8EAKT,IAAIU,EAAQf,KAAKgB,MAAM7B,MAAM8B,IAAI,SAACC,EAAGC,GACnC,OAAOvB,EAAAC,EAAAC,cAAA,MAAIsB,IAAKD,GAASD,EAAGzB,QAAQC,IAAIyB,MAG1C,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAE2B,IAAvBE,KAAKgB,MAAM9B,QAAmB6B,EAAQ,IAIxCnB,EAAAC,EAAAC,cAAA,UAAQuB,QAASrB,KAAKgB,MAAM3B,aAA5B,eACAO,EAAAC,EAAAC,cAAA,UAAQuB,QAASrB,KAAKgB,MAAMrB,aAA5B,eAA6DC,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WASrEF,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,OAAOlB,KAAK,OAAOmB,YAAY,QAAQb,MAAOV,KAAKf,MAAMkB,KAAOqB,SAAUxB,KAAKM,gBAC3FV,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,OAAOlB,KAAK,OAAOmB,YAAY,QAAQb,MAAOV,KAAKf,MAAMmB,KAAOoB,SAAUxB,KAAKM,gBAC3FV,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,OAAOlB,KAAK,QAAQmB,YAAY,aAAab,MAAOV,KAAKf,MAAMoB,MAAQmB,SAAUxB,KAAKM,gBAClGV,EAAAC,EAAAC,cAAA,SAAIE,KAAKf,MAAMkB,MApBjB,IAoB2BP,EAAAC,EAAAC,cAAA,WACzBF,EAAAC,EAAAC,cAAA,SAAIE,KAAKf,MAAMmB,MArBjB,IAqB2BR,EAAAC,EAAAC,cAAA,WACzBF,EAAAC,EAAAC,cAAA,SAAIE,KAAKf,MAAMoB,OAtBjB,IAsB4BT,EAAAC,EAAAC,cAAA,WAC1BF,EAAAC,EAAAC,cAAA,UAAQuB,QAASrB,KAAKc,UAAtB,qBA5Dab,aAoENjB,ICpGKyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2b620286.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport propTypes from 'prop-types'\nclass App extends Component {  \n  \n  state = {\n    display: true,\n    names: ['Mudassir', 'Raheel', 'shoaib'],\n    selected: '',\n  }\n  \n  changeState = () => {\n    this.setState( (prevState) => {\n      console.log(prevState)\n      return ({names: ['Aftab', 'Subhani', 'Mudassir']})\n      \n    })\n    \n    \n  }\n  toogleMenue = ()=>{\n    if(this.state.display === true){\n      this.setState({display:false})\n    }else{\n      \n      this.setState({display:true})\n    }\n  }\n  \n  \n  render() {\n    return (\n    <div>\n        <Cities names={this.state.names} display={this.state.display} \n        changeState={this.changeState} toogleMenue={this.toogleMenue} />\n        \n        <h2>{this.state.selected}</h2>\n    </div>\n\n);\n}\n}\n\nclass Cities extends Component {\n\n  static propTypes = {\n    names: propTypes.oneOfType([propTypes.object, propTypes.array])\n  }\n  // state = {\n    //   display: true,\n    //   names: ['Mudassir', 'Raheel', 'shoaib'],\n  //   selected: 'Raheel'\n  // } \n \nstate = {\n  text: '',\n  name: '',\n  fname: ''\n}\n\n  changeHandler = (event)=>{\n    console.log(event)\n    const {name, value} = event.target\n    this.setState({[name] : value})\n  }\n\n  clearAll = ()=>{\n    this.setState({\n      text:'' ,\n      name: '' ,\n      fname: ''\n    })\n  }\n  \n  render(){\n    let items = this.props.names.map((n, index)=>{\n      return <li key={index} >{n}{console.log(index)}</li>\n    }) \n    // let cities = ['Jaranwala', 'Faisalabad', 'Lahore']\n    return(\n      <div>\n        <ul>\n          {\n            this.props.display === true ? items : ''          \n          }\n        </ul>\n          {/* <h2> {this.state.selected}</h2> */}\n          <button onClick={this.props.changeState}>ChangeState</button>\n          <button onClick={this.props.toogleMenue}>toogleMenue</button><br /><hr></hr>\n{/*         \n        <ul>{\n          cities.map((value, index) => {\n            return<li key={index}>{value} {console.log(index)} </li>  \n          }\n          )}\n        </ul>\n */}\n        <input type=\"text\" name='text' placeholder=\"Text \" value={this.state.text}  onChange={this.changeHandler} />    \n        <input type=\"text\" name='name' placeholder=\"Name \" value={this.state.name}  onChange={this.changeHandler} />    \n        <input type=\"text\" name=\"fname\" placeholder=\"fathername\" value={this.state.fname}  onChange={this.changeHandler} />    \n        <p>{this.state.text}</p> <br />\n        <p>{this.state.name}</p> <br />\n        <p>{this.state.fname}</p> <br />\n        <button onClick={this.clearAll}>Clear All</button>\n    \n      </div>\n    )\n  }\n}\n\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}